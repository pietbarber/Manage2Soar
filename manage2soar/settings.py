#############################################################
#
# Django settings for Manage2Soar project.
#
# Generated by 'django-admin startproject' using Django 5.2.
#
# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/
#
# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
#
#############################################################


import logging
import os
from pathlib import Path

from django.contrib.messages import constants as messages
from django.shortcuts import redirect
from dotenv import load_dotenv
from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Define the base directory of the Django project.
# This calculates the path to the directory containing 'manage.py'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from the .env file located in the BASE_DIR.
# This ensures that sensitive information and configuration can be managed
# outside of the codebase, improving security and flexibility.
dotenv_path = BASE_DIR / ".env"
if dotenv_path.exists():
    load_dotenv(dotenv_path)
else:
    # Log a warning or handle the case where .env is not found,
    # especially in development environments.
    # In production, environment variables are typically set directly.
    logger = logging.getLogger(__name__)
    logger.warning(
        (
            f".env file not found at {dotenv_path}. "
            "Relying on system environment variables."
        )
    )

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

if not SECRET_KEY:
    raise ValueError("DJANGO_SECRET_KEY not set in environment!")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
STATIC_ROOT = BASE_DIR / "staticfiles"

# Application definition

INSTALLED_APPS = [
    "import_export",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "crispy_bootstrap4",
    "social_django",
    "tinymce",
    "members",
    "logsheet",
    "duty_roster",
    "analytics",
    "cms",
    "django.contrib.humanize",
    "reversion",
    "django_htmx",
    "django_extensions",
    "instructors.apps.InstructorsConfig",
    "knowledgetest",
    "siteconfig",
    "storages",
    "notifications",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"
LOGIN_URL = "/members/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/login/"
AUTH_USER_MODEL = "members.Member"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
]

LOGIN_REQUIRED_MIDDLEWARE = (
    "django.contrib.auth.middleware.AuthenticationMiddleware",
)


def login_required_middleware(get_response):
    def middleware(request):
        if not request.user.is_authenticated and not request.path.startswith(
            "/accounts/login/"
        ):
            return redirect("login")
        return get_response(request)

    return middleware


ROOT_URLCONF = "manage2soar.urls"
DEFAULT_AIRFIELD_ID = 1

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "manage2soar.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "5432"),
        "sslmode": "require",
    },
    "legacy": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("LEGACY_DB_NAME"),
        "USER": os.getenv("LEGACY_DB_USER"),
        "PASSWORD": os.getenv("LEGACY_DB_PASSWORD"),
        "HOST": os.getenv("LEGACY_DB_HOST", "localhost"),
        "PORT": os.getenv("LEGACY_DB_PORT", "5555"),
    },
}


# These are to allow us to have users log in with Google OAuth2
LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")

SOCIAL_AUTH_PIPELINE = (
    # Standard steps
    # Get user details from provider
    "social_core.pipeline.social_auth.social_details",
    "social_core.pipeline.social_auth.social_uid",  # Get provider UID
    # Check if auth is allowed
    "social_core.pipeline.social_auth.auth_allowed",
    # Try to find existing social user
    "social_core.pipeline.social_auth.social_user",
    # üîÅ NEW: Associate by email if not linked yet (password-first ‚Üí OAuth2)
    "social_core.pipeline.social_auth.associate_by_email",
    # üõ†Ô∏è Custom steps ‚Äî insert after association
    "members.pipeline.debug_pipeline_data",  # Log details
    # Create proper username format
    "members.pipeline.create_username",
    # Default username getter
    "social_core.pipeline.user.get_username",
    # Create user if not found
    "social_core.pipeline.user.create_user",
    "members.pipeline.set_default_membership_status",  # Set membership status
    # Fetch profile picture from Google
    "members.pipeline.fetch_google_profile_picture",
    # Standard steps to finalize
    "social_core.pipeline.social_auth.associate_user",  # Link social to user
    "social_core.pipeline.social_auth.load_extra_data",  # Load extras
    "social_core.pipeline.user.user_details",  # Update user fields
)


MESSAGE_TAGS = {
    messages.ERROR: "danger",  # maps Django "error" to Bootstrap "danger"
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

#############################################################
# ---- Google Cloud Storage (GCS) / django-storages config ----
# All GCS-related settings consolidated here for clarity
#############################################################
GS_BUCKET_NAME = os.getenv("GS_BUCKET_NAME")
GS_PROJECT_ID = os.getenv("GS_PROJECT_ID")  # optional
GS_MEDIA_LOCATION = os.getenv("GS_MEDIA_LOCATION", "media")

# Credentials for GCS
cred_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
if cred_path:
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(cred_path)


# Django 5.1+ storage backend configuration
# Always define 'staticfiles' backend, even if not using GCS for static
STORAGES = {
    "default": {
        "BACKEND": "manage2soar.storage_backends.MediaRootGCS",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

GS_DEFAULT_ACL = os.getenv("GS_DEFAULT_ACL", "publicRead")
MEDIA_URL = os.getenv(
    "MEDIA_URL",
    f"https://storage.googleapis.com/{GS_BUCKET_NAME}/{GS_MEDIA_LOCATION}/",
)
# print(f"[DEBUG] MEDIA_URL at settings load: {MEDIA_URL}")

# These static directories are not on Google Storage Platform.
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"
TIME_ZONE = "America/New_York"
USE_TZ = True


USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = (
    "social_core.backends.google.GoogleOAuth2",
    "django.contrib.auth.backends.ModelBackend",
)


# Or your real domain in production
# ALLOWED_HOSTS = ['10.76.0.0', '127.0.0.1',
# 'localhost', 'm2s.skylinesoaring.org', '.skylinesoaring.org']

ALLOWED_HOSTS = ["*"]

# Trust X-Forwarded-Proto header for HTTPS detection.
# This is required for OAuth2 redirect URIs to use https behind a proxy.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


DEBUG = True
if DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

CSRF_TRUSTED_ORIGINS = ["https://m2s.skylinesoaring.org"]
SITE_URL = "https://m2s.skylinesoaring.org"

DEFAULT_FROM_EMAIL = "noreply@default.manage2soar.org"
EMAIL_SUBJECT_PREFIX = "[Manage2Soar] "


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "social": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "duty_roster.generator": {
            "handlers": ["console"],
            "level": "WARNING",
        },
    },
}

handler403 = "members.views.custom_permission_denied_view"

# Use locally hosted TinyMCE JS
TINYMCE_JS_URL = "/static/tinymce/tinymce.min.js"

TINYMCE_DEFAULT_CONFIG = {
    "relative_urls": False,  # turn off relative URLs
    "remove_script_host": False,  # strip protocol+host
    "convert_urls": True,  # Ensure URLs are run through TinyMCE's converter
    "height": 500,
    "menubar": "file edit view insert format tools table help",
    "plugins": "image link media code lists table",
    "toolbar": (
        "undo redo | bold italic underline | alignleft "
        "aligncenter alignright | bullist numlist outdent indent | "
        "link image media | table | code"
    ),
    "image_caption": True,
    "automatic_uploads": True,
    "file_picker_types": "image",
    "images_upload_url": "/members/tinymce-upload/",
    "images_upload_credentials": True,  # include CSRF token
    "table_default_attributes": {"border": "1"},
    "table_toolbar": (
        "tableprops cellprops | "
        "tableinsertrowbefore tableinsertrowafter tabledeleterow | "
        "tableinsertcolbefore tableinsertcolafter tabledeletecol"
    ),
    "promotion": False,  # Disable TinyMCE 'Upgrade' button
}

TEMPLATES[0]["OPTIONS"]["context_processors"].append(
    "notifications.context_processors.notifications"
)
